def calculate_discount(price, discount):
    return price - (price * discount / 100)

print(calculate_discount(100, 10))  #  Expected: 90.0
print(calculate_discount(-50, 10))  #  Negative price should not be allowed
print(calculate_discount(100, "ten"))  #  TypeError: unsupported operand type(s)
print(calculate_discount(100, 150))  #  Discount should not exceed 100%

refactored function
def calculate_discount(price, discount):
try:
    price = float(price)
    discount = float(discount)

    if price < 0:
        return "Error: Price cannot be negative"

    if not 0 <= discount <= 100:
        return "Error: Discount must be between 0 and 100"

    return price - (price * discount / 100)
except:
   return "Error: Price and discount must be numbers."

print(calculate_discount(100, 10))   #  90.0
print(calculate_discount(-50, 10))   #  "Error: Price cannot be negative"
print(calculate_discount(100, "ten"))  #  "Error: Price and discount must be numbers"
print(calculate_discount(100, 150))  #  "Error: Discount must be between 0 and 100"

What was the issue with the original code?
issue and solution all showed in the code.

How does handling errors improve reliability?
Provides clear error messages, preventing illogical calculations, prevents unexpected crashes from inputs
